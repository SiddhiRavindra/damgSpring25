{
	"name": "dataflowFact",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable",
						"type": "DatasetReference"
					},
					"name": "sourceStage"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableBreed",
						"type": "DatasetReference"
					},
					"name": "sourceBreed"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableLocation",
						"type": "DatasetReference"
					},
					"name": "sourceLocation"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableDate",
						"type": "DatasetReference"
					},
					"name": "sourceDate"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableFact",
						"type": "DatasetReference"
					},
					"name": "sourceFactMaxSK"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTableFact",
						"type": "DatasetReference"
					},
					"name": "sinkFact"
				}
			],
			"transformations": [
				{
					"name": "joinBreed"
				},
				{
					"name": "joinLocation"
				},
				{
					"name": "joinDate"
				},
				{
					"name": "surrogateKeyFact"
				},
				{
					"name": "joinFact"
				},
				{
					"name": "aggregatefact"
				},
				{
					"name": "derivedColumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceStage",
				"source(output(",
				"          BREED_SK as string,",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBreed",
				"source(output(",
				"          LOCATION_SK as decimal(10,0),",
				"          CITY as string,",
				"          STATE as string,",
				"          STATE_ABBR as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLocation",
				"source(output(",
				"          DT as string,",
				"          ABRV_DAY_NAME as string,",
				"          MONTH_NAME as string,",
				"          START_DAY_OF_MONTH as string,",
				"          END_DAY_OF_MONTH as string,",
				"          QUARTER_NUM as string,",
				"          DAY_OF_WEEK as string,",
				"          IS_WEEKEND as string,",
				"          YEAR_NUM as string,",
				"          MONTH_NUM as string,",
				"          DAY_NUM as string,",
				"          DATE_DIM_SK as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDate",
				"source(output(",
				"          MAXPETLICSK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'Select NVL(MAX(PET_LIC_SK),0) as MAX_PET_LIC_SK from DAMGSPRING25_DB_SCHEMA.PET_LIC_FACT',",
				"     format: 'query') ~> sourceFactMaxSK",
				"sourceStage, sourceBreed join(sourceStage@PRIMARY_BREED == sourceBreed@PRIMARY_BREED",
				"     && sourceStage@SECONDARY_BREED == sourceBreed@SECONDARY_BREED",
				"     && SPECIES == SPECIES_NAME,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBreed",
				"joinBreed, sourceLocation join(sourceStage@ZIP_CODE == sourceLocation@ZIP_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLocation",
				"joinLocation, sourceDate join(LICENSE_ISSUE_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDate",
				"aggregatefact keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKeyFact",
				"joinDate, sourceFactMaxSK join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinFact",
				"joinFact aggregate(groupBy(BREED_SK,",
				"          LOCATION_SK,",
				"          DT,",
				"          DATE_DIM_SK),",
				"     LIS_ISSUE_CNT = count(LICENSE_ISSUE_DATE)) ~> aggregatefact",
				"surrogateKeyFact derive(PET_LIC_SK = RowNum,",
				"          DI_JOB_ID = uuid(),",
				"          DI_LOAD_DT = currentTimestamp()) ~> derivedColumn",
				"derivedColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PET_LIC_SK as string,",
				"          DATE_SK as string,",
				"          LOCATION_SK as string,",
				"          BREED_SK as string,",
				"          LIC_NUM as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          PET_LIC_SK,",
				"          DATE_SK = DATE_DIM_SK,",
				"          LOCATION_SK,",
				"          BREED_SK,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DATE = DI_LOAD_DT",
				"     )) ~> sinkFact"
			]
		}
	}
}