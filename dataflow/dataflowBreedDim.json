{
	"name": "dataflowBreedDim",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable",
						"type": "DatasetReference"
					},
					"name": "sourceStage"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableBreed",
						"type": "DatasetReference"
					},
					"name": "sourceBreedMax"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableBreed",
						"type": "DatasetReference"
					},
					"name": "sourceBreed"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTableBreed",
						"type": "DatasetReference"
					},
					"name": "sinkBreed"
				}
			],
			"transformations": [
				{
					"name": "joinWithBreedMax"
				},
				{
					"name": "aggregate"
				},
				{
					"name": "joinBreedStage"
				},
				{
					"name": "filter"
				},
				{
					"name": "surrogateKey"
				},
				{
					"name": "derivedColumn"
				},
				{
					"name": "select"
				},
				{
					"name": "derivedColumnMaxBreed"
				}
			],
			"scriptLines": [
				"parameters{",
				"     jobid as string (uuid())",
				"}",
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceStage",
				"source(output(",
				"          MAXBREEDSK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'Select NVL(MAX(BREED_SK),0) as MAXBREEDSK from DAMGSPRING25_DB_SCHEMA.BREED_DIM',",
				"     format: 'query') ~> sourceBreedMax",
				"source(output(",
				"          BREED_SK as string,",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBreed",
				"sourceStage, sourceBreedMax join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWithBreedMax",
				"joinWithBreedMax aggregate(groupBy(PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          SPECIES,",
				"          MAXBREEDSK),",
				"     CountRow = count(LICENSE_NUMBER)) ~> aggregate",
				"aggregate, sourceBreed join(aggregate@SECONDARY_BREED == sourceBreed@SECONDARY_BREED",
				"     && aggregate@PRIMARY_BREED == sourceBreed@PRIMARY_BREED",
				"     && SPECIES == SPECIES_NAME,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBreedStage",
				"joinBreedStage filter(isNull(SPECIES_NAME)&&isNull(sourceBreed@PRIMARY_BREED)&&isNull(sourceBreed@SECONDARY_BREED)) ~> filter",
				"select keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"filter derive(DI_JOB_ID = uuid(),",
				"          DI_LOAD_DATE = currentTimestamp()) ~> derivedColumn",
				"derivedColumn select(mapColumn(",
				"          PRIMARY_BREED = aggregate@PRIMARY_BREED,",
				"          SECONDARY_BREED = aggregate@SECONDARY_BREED,",
				"          SPECIES,",
				"          MAXBREEDSK,",
				"          CountRow,",
				"          BREED_SK,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"surrogateKey derive(BREED_SK = MAXBREEDSK+RowNum,",
				"          DI_JOB_ID = uuid(),",
				"          DI_LOAD_DATE = currentTimestamp()) ~> derivedColumnMaxBreed",
				"derivedColumnMaxBreed sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BREED_SK as string,",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          BREED_SK,",
				"          SPECIES_NAME = SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          DI_JOB_ID,",
				"          DI_CREATED_DT = DI_LOAD_DATE",
				"     )) ~> sinkBreed"
			]
		}
	}
}